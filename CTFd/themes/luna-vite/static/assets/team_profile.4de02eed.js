import{m as i}from"./module.esm.860ebcbd.js";import{c as n,C as s,e as r}from"./base.566e0342.js";import{g as l,a as h}from"./category-radar.e46a3bdd.js";import"./duration.21bcce5f.js";import"./echarts.eea77e6b.js";import"./notificationCounter.4f4e1e9f.js";import"./scoreboard.b2aab010.js";window.Alpine=i;i.data("TeamGraphs",()=>({solves:{data:[]},fails:{data:[]},awards:{data:[]},challenges:{data:[]},categoriesCount:0,solveCount:0,failCount:0,awardCount:0,getSolvePercentage(){let a=this.solveCount/(this.solveCount+this.failCount)*100;return Math.round(a)},getFailPercentage(){let a=this.failCount/(this.solveCount+this.failCount)*100;return Math.round(a)},getCategoryBreakdown(){let a=[],e={};this.solves.data.map(t=>{a.push(t.challenge.category)}),a.forEach(t=>{t in e?e[t]+=1:e[t]=1});let o=[];for(const t in e)o.push({name:t,count:e[t],percent:e[t]/a.length*100,color:n(t)});return o},async init(){const a=window.TEAM?window.TEAM.id:"me";this.solves=await s.pages.teams.teamSolves(a),this.fails=await s.pages.teams.teamFails(a),this.awards=await s.pages.teams.teamAwards(a),this.challenges=await s.pages.challenges.getChallenges(),this.solveCount=this.solves.meta.count,this.failCount=this.fails.meta.count,this.awardCount=this.awards.meta.count,this.categoriesCount=new Set(this.challenges.map(t=>t.category)).size;const e=window.TEAM||s.team;let o=l(e.id,e.name,this.solves.data,this.awards.data);if(this.$refs.scoregraph&&r(this.$refs.scoregraph,o),this.$refs.categoryRadar){const t=h(e.id,e.name,this.solves.data,this.challenges);r(this.$refs.categoryRadar,t)}}}));i.start();
