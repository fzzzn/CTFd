import{m as i}from"./module.esm.860ebcbd.js";import{c as n,C as a,e as r}from"./base.566e0342.js";import{g as l,a as h}from"./category-radar.e46a3bdd.js";import"./duration.21bcce5f.js";import"./echarts.eea77e6b.js";import"./notificationCounter.4f4e1e9f.js";import"./scoreboard.b2aab010.js";window.Alpine=i;i.data("UserGraphs",()=>({solves:{data:[]},fails:{data:[]},awards:{data:[]},challenges:{data:[]},categoriesCount:0,solveCount:0,failCount:0,awardCount:0,getSolvePercentage(){let e=this.solveCount/(this.solveCount+this.failCount)*100;return Math.round(e)},getFailPercentage(){let e=this.failCount/(this.solveCount+this.failCount)*100;return Math.round(e)},getCategoryBreakdown(){let e=[],s={};this.solves.data.map(t=>{e.push(t.challenge.category)}),e.forEach(t=>{t in s?s[t]+=1:s[t]=1});let o=[];for(const t in s)o.push({name:t,count:s[t],percent:s[t]/e.length*100,color:n(t)});return o},async init(){const e=window.USER?window.USER.id:"me";this.solves=await a.pages.users.userSolves(e),this.fails=await a.pages.users.userFails(e),this.awards=await a.pages.users.userAwards(e),this.challenges=await a.pages.challenges.getChallenges(),this.solveCount=this.solves.meta.count,this.failCount=this.fails.meta.count,this.awardCount=this.awards.meta.count,this.categoriesCount=new Set(this.challenges.map(t=>t.category)).size,console.log(this.solves.data);const s=window.USER||a.user;let o=l(s.id,s.name,this.solves.data,this.awards.data);if(this.$refs.scoregraph&&r(this.$refs.scoregraph,o),this.$refs.categoryRadar){const t=h(s.id,s.name,this.solves.data,this.challenges);r(this.$refs.categoryRadar,t)}}}));i.start();
